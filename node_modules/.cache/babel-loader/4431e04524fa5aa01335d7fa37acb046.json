{"ast":null,"code":"var _jsxFileName = \"/Users/nabinniroula/Desktop/SpringBoard_Coding/Software_Engineering/July2522/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard()); // start with default values\n\n  nrows = 5;\n  ncols = 5;\n  chanceLightStartsOn = 0.25;\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows; i++) {\n      const rows = [];\n\n      for (let j = 0; j < ncols; j++) {\n        const columns = []; // push true or false to the row\n\n        columns.push(Math.random() < chanceLightStartsOn);\n      }\n\n      rows.push(i);\n    } // html table\n\n\n    /*#__PURE__*/\n    _jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this);\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","rows","j","columns","push","Math","random","hasWon","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy"],"sources":["/Users/nabinniroula/Desktop/SpringBoard_Coding/Software_Engineering/July2522/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n     // start with default values\n  nrows = 5;\n  ncols = 5;\n  chanceLightStartsOn = 0.25;\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n   \n   \n    for(let i = 0; i< nrows; i++){\n        const rows = [];\n        for(let j=0; j< ncols; j++){\n            const columns = [];\n            // push true or false to the row\n            columns.push(Math.random() < chanceLightStartsOn);\n        }\n        rows.push(i);\n\n    }\n\n    // html table\n    <table>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n        <tr>\n            <td></td>\n            <td></td>\n            <td></td>\n        </tr>\n    </table>\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,SAASC,KAAT,OAAsD;EAAA;;EAAA,IAAvC;IAAEC,KAAF;IAASC,KAAT;IAAgBC;EAAhB,CAAuC;EACpD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC,CADoD,CAEjD;;EACHL,KAAK,GAAG,CAAR;EACAC,KAAK,GAAG,CAAR;EACAC,mBAAmB,GAAG,IAAtB;EAEA;;EACA,SAASG,WAAT,GAAuB;IACrB,IAAIC,YAAY,GAAG,EAAnB,CADqB,CAErB;;IAGA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEP,KAAlB,EAAyBO,CAAC,EAA1B,EAA6B;MACzB,MAAMC,IAAI,GAAG,EAAb;;MACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAER,KAAhB,EAAuBQ,CAAC,EAAxB,EAA2B;QACvB,MAAMC,OAAO,GAAG,EAAhB,CADuB,CAEvB;;QACAA,OAAO,CAACC,IAAR,CAAaC,IAAI,CAACC,MAAL,KAAgBX,mBAA7B;MACH;;MACDM,IAAI,CAACG,IAAL,CAAUJ,CAAV;IAEH,CAdoB,CAgBrB;;;IACA;IAAA;MAAA,wBACI;QAAA,wBACI;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAMI;QAAA,wBACI;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA,QANJ,eAWI;QAAA,wBACI;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA;;IAkBA,OAAOD,YAAP;EACD;;EAED,SAASQ,MAAT,GAAkB,CAChB;EACD;;EAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9BZ,QAAQ,CAACa,QAAQ,IAAI;MACnB,MAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;MAEA,MAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;QACpC;QAEA,IAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGlB,KAAd,IAAuBiB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGlB,KAAzC,EAAgD;UAC9CwB,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;QACD;MACF,CAND,CAHmB,CAWnB;MAEA;MAEA;;IACD,CAhBO,CAAR;EAiBD,CApEmD,CAsEpD;EAEA;EAEA;EAEA;;AACD;;GA7EQpB,K;;KAAAA,K;AA+ET,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}