{"ast":null,"code":"var _jsxFileName = \"/Users/nabinniroula/Desktop/SpringBoard_Coding/Software_Engineering/July2522/react-lights-out/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(_ref) {\n  _s();\n\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard()); // start with default values\n\n  nrows = 5;\n  ncols = 5;\n  chanceLightStartsOn = 0.25;\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows; i++) {\n      const row = [];\n\n      for (let j = 0; j < ncols; j++) {\n        //const column = [];\n        // push true or false to the row\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n\n      initialBoard.push(row);\n    } // html table\n    // <table>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    // </table>\n\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // if all cells are false, win\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      const boardCopy = oldBoard.map(row => [...row]); // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy); // TODO: return the copy\n\n      return boardCopy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Congratulations! You on the game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  } // make table board\n  // TODO\n\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this));\n    }\n\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 19\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","tblBoard"],"sources":["/Users/nabinniroula/Desktop/SpringBoard_Coding/Software_Engineering/July2522/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n// function Board({ nrows, ncols, chanceLightStartsOn }) {\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n     // start with default values\n  nrows = 5;\n  ncols = 5;\n  chanceLightStartsOn = 0.25;\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n   \n    for(let i = 0; i< nrows; i++){\n        const row = [];\n        for(let j=0; j< ncols; j++){\n            //const column = [];\n            // push true or false to the row\n            row.push(Math.random() < chanceLightStartsOn);\n        }\n        initialBoard.push(row);\n\n    }\n\n    // html table\n    // <table>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    //     <tr>\n    //         <td></td>\n    //         <td></td>\n    //         <td></td>\n    //     </tr>\n    // </table>\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    // if all cells are false, win\n    return board.every(row => row.every(cell => !cell));\n\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if (hasWon()) {\n    return <div>Congratulations! You on the game!</div>;\n  }\n\n  // make table board\n\n  // TODO\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}